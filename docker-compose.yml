version: "3.9"

networks:
  academia-net:
    name: academia-net

volumes:
  pgdata:
  nginx.certs:
  nginx.vhost.d:
  nginx.html:

services:
  # --- Reverse proxy para virtual hosts + SSL automático ---
  reverse-proxy:
    image: jwilder/nginx-proxy:latest
    container_name: academia-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DHPARAM_GENERATION=false
    volumes:
      - nginx.certs:/etc/nginx/certs
      - nginx.vhost.d:/etc/nginx/vhost.d
      - nginx.html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks: [academia-net]

  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion:latest
    container_name: academia-lets
    restart: unless-stopped
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
    volumes:
      - nginx.certs:/etc/nginx/certs
      - nginx.vhost.d:/etc/nginx/vhost.d
      - nginx.html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on: [reverse-proxy]
    networks: [academia-net]

  # --- Base de datos ---
  postgres:
    image: postgres:16
    container_name: academia-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [academia-net]

  # --- Backend: FastAPI + Uvicorn ---
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: academia-backend
    restart: unless-stopped
    environment:
      # Usado por tu app FastAPI (léelo con os.getenv):
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - CORS_ALLOWED_ORIGINS=https://${FRONTEND_HOST},http://localhost:4200
      - UVICORN_WORKERS=2
      - UVICORN_PORT=8000
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks: [academia-net]
    # Para publicar detrás del proxy por dominio:
    environment:
      - VIRTUAL_HOST=${BACKEND_HOST}
      - LETSENCRYPT_HOST=${BACKEND_HOST}
      - VIRTUAL_PORT=8000

  # --- Frontend: Angular servido por Nginx ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: academia-frontend
    restart: unless-stopped
    depends_on: [backend]
    networks: [academia-net]
    # Para publicar detrás del proxy por dominio:
    environment:
      - VIRTUAL_HOST=${FRONTEND_HOST}
      - LETSENCRYPT_HOST=${FRONTEND_HOST}
      - VIRTUAL_PORT=80
    # Si no usas proxy y quieres ver local:
    # ports:
    #   - "8081:80"

