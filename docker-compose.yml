version: "3.9"

networks:
  academia-net:
    name: academia-net

volumes:
  pgdata:
  nginx.certs:
  nginx.vhost.d:
  nginx.html:


services:
  reverse-proxy:
    image: nginxproxy/nginx-proxy:latest     #  en lugar de jwilder/nginx-proxy
    container_name: academia-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DHPARAM_GENERATION=false
    labels:
      - com.github.nginx-proxy.nginx=true    #  label que el companion busca
    volumes:
      - nginx.certs:/etc/nginx/certs
      - nginx.vhost.d:/etc/nginx/vhost.d
      - nginx.html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks: [academia-net]

  letsencrypt:
    image: nginxproxy/acme-companion:latest  #  en lugar de jrcs/letsencrypt-nginx-proxy-companion
    container_name: academia-lets
    restart: unless-stopped
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
      - NGINX_PROXY_CONTAINER=academia-proxy  #  referencia expl√≠cita al proxy
      # - ACME_CA_URI=https://acme-staging-v02.api.letsencrypt.org/directory  # (opcional para pruebas)
    volumes:
      - nginx.certs:/etc/nginx/certs
      - nginx.vhost.d:/etc/nginx/vhost.d
      - nginx.html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on: [reverse-proxy]
    networks: [academia-net]


  postgres:
    image: postgres:16
    container_name: academia-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [academia-net]

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: academia-backend
    restart: unless-stopped
    environment:
      # FastAPI / app
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}   #  viene del .env
      UVICORN_WORKERS: "2"
      UVICORN_PORT: "8000"
      # nginx-proxy (vhost)
      VIRTUAL_HOST: ${BACKEND_HOST}
      LETSENCRYPT_HOST: ${BACKEND_HOST}
      VIRTUAL_PORT: "8000"
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks: [academia-net]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: academia-frontend
    restart: unless-stopped
    depends_on: [backend]
    environment:
      VIRTUAL_HOST: ${FRONTEND_HOSTS}
      LETSENCRYPT_HOST: ${FRONTEND_HOSTS}
      VIRTUAL_PORT: "80"
    networks: [academia-net]

